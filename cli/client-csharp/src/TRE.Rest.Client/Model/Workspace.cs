/*
 * Azure TRE API
 *
 * Welcome to the Azure TRE API - for more information about templates and workspaces see the [Azure TRE documentation](https://microsoft.github.io/AzureTRE)
 *
 * The version of the OpenAPI document: 0.2.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TRE.Rest.Client.Client.OpenAPIDateConverter;

namespace TRE.Rest.Client.Model
{
    /// <summary>
    /// Workspace request
    /// </summary>
    [DataContract(Name = "Workspace")]
    public partial class Workspace : IEquatable<Workspace>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [DataMember(Name = "resourceType", EmitDefaultValue = true)]
        public ResourceType? ResourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Workspace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Workspace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Workspace" /> class.
        /// </summary>
        /// <param name="id">GUID identifying the resource request (required).</param>
        /// <param name="templateName">The resource template (bundle) to deploy (required).</param>
        /// <param name="templateVersion">The version of the resource template (bundle) to deploy (required).</param>
        /// <param name="properties">Parameters for the deployment.</param>
        /// <param name="isActive">isActive (default to true).</param>
        /// <param name="isEnabled">isEnabled (default to true).</param>
        /// <param name="resourceType">resourceType.</param>
        /// <param name="etag">eTag of the document (required).</param>
        /// <param name="resourcePath">resourcePath (default to &quot;&quot;).</param>
        /// <param name="resourceVersion">resourceVersion (default to 0).</param>
        /// <param name="user">user.</param>
        /// <param name="updatedWhen">updatedWhen (default to 0M).</param>
        /// <param name="history">history.</param>
        /// <param name="workspaceURL">Main endpoint for workspace users (default to &quot;&quot;).</param>
        /// <param name="authInformation">authInformation.</param>
        public Workspace(string id = default(string), string templateName = default(string), string templateVersion = default(string), Object properties = default(Object), bool isActive = true, bool isEnabled = true, ResourceType? resourceType = default(ResourceType?), string etag = default(string), string resourcePath = "", int resourceVersion = 0, Object user = default(Object), decimal updatedWhen = 0M, Collection<ResourceHistoryItem> history = default(Collection<ResourceHistoryItem>), string workspaceURL = "", Object authInformation = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for Workspace and cannot be null");
            }
            this.Id = id;
            // to ensure "templateName" is required (not null)
            if (templateName == null) {
                throw new ArgumentNullException("templateName is a required property for Workspace and cannot be null");
            }
            this.TemplateName = templateName;
            // to ensure "templateVersion" is required (not null)
            if (templateVersion == null) {
                throw new ArgumentNullException("templateVersion is a required property for Workspace and cannot be null");
            }
            this.TemplateVersion = templateVersion;
            // to ensure "etag" is required (not null)
            if (etag == null) {
                throw new ArgumentNullException("etag is a required property for Workspace and cannot be null");
            }
            this.Etag = etag;
            this.Properties = properties;
            this.IsActive = isActive;
            this.IsEnabled = isEnabled;
            this.ResourceType = resourceType;
            // use default value if no "resourcePath" provided
            this.ResourcePath = resourcePath ?? "";
            this.ResourceVersion = resourceVersion;
            this.User = user;
            this.UpdatedWhen = updatedWhen;
            this.History = history;
            // use default value if no "workspaceURL" provided
            this.WorkspaceURL = workspaceURL ?? "";
            this.AuthInformation = authInformation;
        }

        /// <summary>
        /// GUID identifying the resource request
        /// </summary>
        /// <value>GUID identifying the resource request</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The resource template (bundle) to deploy
        /// </summary>
        /// <value>The resource template (bundle) to deploy</value>
        [DataMember(Name = "templateName", IsRequired = true, EmitDefaultValue = false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// The version of the resource template (bundle) to deploy
        /// </summary>
        /// <value>The version of the resource template (bundle) to deploy</value>
        [DataMember(Name = "templateVersion", IsRequired = true, EmitDefaultValue = false)]
        public string TemplateVersion { get; set; }

        /// <summary>
        /// Parameters for the deployment
        /// </summary>
        /// <value>Parameters for the deployment</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Object Properties { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name = "isEnabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// eTag of the document
        /// </summary>
        /// <value>eTag of the document</value>
        [DataMember(Name = "_etag", IsRequired = true, EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or Sets ResourcePath
        /// </summary>
        [DataMember(Name = "resourcePath", EmitDefaultValue = false)]
        public string ResourcePath { get; set; }

        /// <summary>
        /// Gets or Sets ResourceVersion
        /// </summary>
        [DataMember(Name = "resourceVersion", EmitDefaultValue = false)]
        public int ResourceVersion { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public Object User { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedWhen
        /// </summary>
        [DataMember(Name = "updatedWhen", EmitDefaultValue = false)]
        public decimal UpdatedWhen { get; set; }

        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name = "history", EmitDefaultValue = false)]
        public Collection<ResourceHistoryItem> History { get; set; }

        /// <summary>
        /// Main endpoint for workspace users
        /// </summary>
        /// <value>Main endpoint for workspace users</value>
        [DataMember(Name = "workspaceURL", EmitDefaultValue = false)]
        public string WorkspaceURL { get; set; }

        /// <summary>
        /// Gets or Sets AuthInformation
        /// </summary>
        [DataMember(Name = "authInformation", EmitDefaultValue = false)]
        public Object AuthInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Workspace {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  TemplateVersion: ").Append(TemplateVersion).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  ResourcePath: ").Append(ResourcePath).Append("\n");
            sb.Append("  ResourceVersion: ").Append(ResourceVersion).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UpdatedWhen: ").Append(UpdatedWhen).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  WorkspaceURL: ").Append(WorkspaceURL).Append("\n");
            sb.Append("  AuthInformation: ").Append(AuthInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Workspace);
        }

        /// <summary>
        /// Returns true if Workspace instances are equal
        /// </summary>
        /// <param name="input">Instance of Workspace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Workspace input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                ) && 
                (
                    this.TemplateVersion == input.TemplateVersion ||
                    (this.TemplateVersion != null &&
                    this.TemplateVersion.Equals(input.TemplateVersion))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    this.IsEnabled.Equals(input.IsEnabled)
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    this.ResourceType.Equals(input.ResourceType)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.ResourcePath == input.ResourcePath ||
                    (this.ResourcePath != null &&
                    this.ResourcePath.Equals(input.ResourcePath))
                ) && 
                (
                    this.ResourceVersion == input.ResourceVersion ||
                    this.ResourceVersion.Equals(input.ResourceVersion)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.UpdatedWhen == input.UpdatedWhen ||
                    this.UpdatedWhen.Equals(input.UpdatedWhen)
                ) && 
                (
                    this.History == input.History ||
                    this.History != null &&
                    input.History != null &&
                    this.History.SequenceEqual(input.History)
                ) && 
                (
                    this.WorkspaceURL == input.WorkspaceURL ||
                    (this.WorkspaceURL != null &&
                    this.WorkspaceURL.Equals(input.WorkspaceURL))
                ) && 
                (
                    this.AuthInformation == input.AuthInformation ||
                    (this.AuthInformation != null &&
                    this.AuthInformation.Equals(input.AuthInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TemplateName != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateName.GetHashCode();
                }
                if (this.TemplateVersion != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateVersion.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                hashCode = (hashCode * 59) + this.IsEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.ResourceType.GetHashCode();
                if (this.Etag != null)
                {
                    hashCode = (hashCode * 59) + this.Etag.GetHashCode();
                }
                if (this.ResourcePath != null)
                {
                    hashCode = (hashCode * 59) + this.ResourcePath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ResourceVersion.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdatedWhen.GetHashCode();
                if (this.History != null)
                {
                    hashCode = (hashCode * 59) + this.History.GetHashCode();
                }
                if (this.WorkspaceURL != null)
                {
                    hashCode = (hashCode * 59) + this.WorkspaceURL.GetHashCode();
                }
                if (this.AuthInformation != null)
                {
                    hashCode = (hashCode * 59) + this.AuthInformation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
