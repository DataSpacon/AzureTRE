/*
 * Azure TRE API
 *
 * Welcome to the Azure TRE API - for more information about templates and workspaces see the [Azure TRE documentation](https://microsoft.github.io/AzureTRE)
 *
 * The version of the OpenAPI document: 0.2.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TRE.Rest.Client.Client.OpenAPIDateConverter;

namespace TRE.Rest.Client.Model
{
    /// <summary>
    /// Property
    /// </summary>
    [DataContract(Name = "Property")]
    public partial class Property : IEquatable<Property>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Property" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Property() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Property" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="title">title (default to &quot;&quot;).</param>
        /// <param name="description">description (default to &quot;&quot;).</param>
        /// <param name="_default">_default.</param>
        /// <param name="_enum">_enum.</param>
        /// <param name="_const">_const.</param>
        /// <param name="multipleOf">multipleOf.</param>
        /// <param name="maximum">maximum.</param>
        /// <param name="exclusiveMaximum">exclusiveMaximum.</param>
        /// <param name="minimum">minimum.</param>
        /// <param name="exclusiveMinimum">exclusiveMinimum.</param>
        /// <param name="maxLength">maxLength.</param>
        /// <param name="minLength">minLength.</param>
        /// <param name="pattern">pattern.</param>
        /// <param name="updateable">updateable.</param>
        /// <param name="readOnly">readOnly.</param>
        public Property(string type = default(string), string title = "", string description = "", Object _default = default(Object), Collection<string> _enum = default(Collection<string>), Object _const = default(Object), decimal multipleOf = default(decimal), decimal maximum = default(decimal), decimal exclusiveMaximum = default(decimal), decimal minimum = default(decimal), decimal exclusiveMinimum = default(decimal), int maxLength = default(int), int minLength = default(int), string pattern = default(string), bool updateable = default(bool), bool readOnly = default(bool))
        {
            // to ensure "type" is required (not null)
            if (type == null) {
                throw new ArgumentNullException("type is a required property for Property and cannot be null");
            }
            this.Type = type;
            // use default value if no "title" provided
            this.Title = title ?? "";
            // use default value if no "description" provided
            this.Description = description ?? "";
            this.Default = _default;
            this.Enum = _enum;
            this.Const = _const;
            this.MultipleOf = multipleOf;
            this.Maximum = maximum;
            this.ExclusiveMaximum = exclusiveMaximum;
            this.Minimum = minimum;
            this.ExclusiveMinimum = exclusiveMinimum;
            this.MaxLength = maxLength;
            this.MinLength = minLength;
            this.Pattern = pattern;
            this.Updateable = updateable;
            this.ReadOnly = readOnly;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name = "default", EmitDefaultValue = true)]
        public Object Default { get; set; }

        /// <summary>
        /// Gets or Sets Enum
        /// </summary>
        [DataMember(Name = "enum", EmitDefaultValue = false)]
        public Collection<string> Enum { get; set; }

        /// <summary>
        /// Gets or Sets Const
        /// </summary>
        [DataMember(Name = "const", EmitDefaultValue = true)]
        public Object Const { get; set; }

        /// <summary>
        /// Gets or Sets MultipleOf
        /// </summary>
        [DataMember(Name = "multipleOf", EmitDefaultValue = false)]
        public decimal MultipleOf { get; set; }

        /// <summary>
        /// Gets or Sets Maximum
        /// </summary>
        [DataMember(Name = "maximum", EmitDefaultValue = false)]
        public decimal Maximum { get; set; }

        /// <summary>
        /// Gets or Sets ExclusiveMaximum
        /// </summary>
        [DataMember(Name = "exclusiveMaximum", EmitDefaultValue = false)]
        public decimal ExclusiveMaximum { get; set; }

        /// <summary>
        /// Gets or Sets Minimum
        /// </summary>
        [DataMember(Name = "minimum", EmitDefaultValue = false)]
        public decimal Minimum { get; set; }

        /// <summary>
        /// Gets or Sets ExclusiveMinimum
        /// </summary>
        [DataMember(Name = "exclusiveMinimum", EmitDefaultValue = false)]
        public decimal ExclusiveMinimum { get; set; }

        /// <summary>
        /// Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name = "maxLength", EmitDefaultValue = false)]
        public int MaxLength { get; set; }

        /// <summary>
        /// Gets or Sets MinLength
        /// </summary>
        [DataMember(Name = "minLength", EmitDefaultValue = false)]
        public int MinLength { get; set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        [DataMember(Name = "pattern", EmitDefaultValue = false)]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or Sets Updateable
        /// </summary>
        [DataMember(Name = "updateable", EmitDefaultValue = true)]
        public bool Updateable { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name = "readOnly", EmitDefaultValue = true)]
        public bool ReadOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Property {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  Enum: ").Append(Enum).Append("\n");
            sb.Append("  Const: ").Append(Const).Append("\n");
            sb.Append("  MultipleOf: ").Append(MultipleOf).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  ExclusiveMaximum: ").Append(ExclusiveMaximum).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  ExclusiveMinimum: ").Append(ExclusiveMinimum).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Updateable: ").Append(Updateable).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Property);
        }

        /// <summary>
        /// Returns true if Property instances are equal
        /// </summary>
        /// <param name="input">Instance of Property to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Property input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Default == input.Default ||
                    (this.Default != null &&
                    this.Default.Equals(input.Default))
                ) && 
                (
                    this.Enum == input.Enum ||
                    this.Enum != null &&
                    input.Enum != null &&
                    this.Enum.SequenceEqual(input.Enum)
                ) && 
                (
                    this.Const == input.Const ||
                    (this.Const != null &&
                    this.Const.Equals(input.Const))
                ) && 
                (
                    this.MultipleOf == input.MultipleOf ||
                    this.MultipleOf.Equals(input.MultipleOf)
                ) && 
                (
                    this.Maximum == input.Maximum ||
                    this.Maximum.Equals(input.Maximum)
                ) && 
                (
                    this.ExclusiveMaximum == input.ExclusiveMaximum ||
                    this.ExclusiveMaximum.Equals(input.ExclusiveMaximum)
                ) && 
                (
                    this.Minimum == input.Minimum ||
                    this.Minimum.Equals(input.Minimum)
                ) && 
                (
                    this.ExclusiveMinimum == input.ExclusiveMinimum ||
                    this.ExclusiveMinimum.Equals(input.ExclusiveMinimum)
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    this.MaxLength.Equals(input.MaxLength)
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    this.MinLength.Equals(input.MinLength)
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                ) && 
                (
                    this.Updateable == input.Updateable ||
                    this.Updateable.Equals(input.Updateable)
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    this.ReadOnly.Equals(input.ReadOnly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Default != null)
                {
                    hashCode = (hashCode * 59) + this.Default.GetHashCode();
                }
                if (this.Enum != null)
                {
                    hashCode = (hashCode * 59) + this.Enum.GetHashCode();
                }
                if (this.Const != null)
                {
                    hashCode = (hashCode * 59) + this.Const.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MultipleOf.GetHashCode();
                hashCode = (hashCode * 59) + this.Maximum.GetHashCode();
                hashCode = (hashCode * 59) + this.ExclusiveMaximum.GetHashCode();
                hashCode = (hashCode * 59) + this.Minimum.GetHashCode();
                hashCode = (hashCode * 59) + this.ExclusiveMinimum.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxLength.GetHashCode();
                hashCode = (hashCode * 59) + this.MinLength.GetHashCode();
                if (this.Pattern != null)
                {
                    hashCode = (hashCode * 59) + this.Pattern.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Updateable.GetHashCode();
                hashCode = (hashCode * 59) + this.ReadOnly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
