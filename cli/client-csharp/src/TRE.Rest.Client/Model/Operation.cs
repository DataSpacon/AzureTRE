/*
 * Azure TRE API
 *
 * Welcome to the Azure TRE API - for more information about templates and workspaces see the [Azure TRE documentation](https://microsoft.github.io/AzureTRE)
 *
 * The version of the OpenAPI document: 0.2.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TRE.Rest.Client.Client.OpenAPIDateConverter;

namespace TRE.Rest.Client.Model
{
    /// <summary>
    /// Operation model
    /// </summary>
    [DataContract(Name = "Operation")]
    public partial class Operation : IEquatable<Operation>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public Status? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Operation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Operation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Operation" /> class.
        /// </summary>
        /// <param name="id">GUID identifying the operation (required).</param>
        /// <param name="resourceId">GUID identifying the resource (required).</param>
        /// <param name="resourcePath">Path of the resource undergoing change, i.e. &#39;/workspaces/guid/workspace-services/guid/&#39; (required).</param>
        /// <param name="resourceVersion">Version of the resource this operation relates to (default to 0).</param>
        /// <param name="status">status.</param>
        /// <param name="action">Name of the action being performed on the resource, i.e. install, uninstall, start (required).</param>
        /// <param name="message">message (default to &quot;&quot;).</param>
        /// <param name="createdWhen">createdWhen.</param>
        /// <param name="updatedWhen">updatedWhen.</param>
        /// <param name="user">user.</param>
        public Operation(string id = default(string), string resourceId = default(string), string resourcePath = default(string), int resourceVersion = 0, Status? status = default(Status?), string action = default(string), string message = "", decimal createdWhen = default(decimal), decimal updatedWhen = default(decimal), Object user = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for Operation and cannot be null");
            }
            this.Id = id;
            // to ensure "resourceId" is required (not null)
            if (resourceId == null) {
                throw new ArgumentNullException("resourceId is a required property for Operation and cannot be null");
            }
            this.ResourceId = resourceId;
            // to ensure "resourcePath" is required (not null)
            if (resourcePath == null) {
                throw new ArgumentNullException("resourcePath is a required property for Operation and cannot be null");
            }
            this.ResourcePath = resourcePath;
            // to ensure "action" is required (not null)
            if (action == null) {
                throw new ArgumentNullException("action is a required property for Operation and cannot be null");
            }
            this.Action = action;
            this.ResourceVersion = resourceVersion;
            this.Status = status;
            // use default value if no "message" provided
            this.Message = message ?? "";
            this.CreatedWhen = createdWhen;
            this.UpdatedWhen = updatedWhen;
            this.User = user;
        }

        /// <summary>
        /// GUID identifying the operation
        /// </summary>
        /// <value>GUID identifying the operation</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// GUID identifying the resource
        /// </summary>
        /// <value>GUID identifying the resource</value>
        [DataMember(Name = "resourceId", IsRequired = true, EmitDefaultValue = false)]
        public string ResourceId { get; set; }

        /// <summary>
        /// Path of the resource undergoing change, i.e. &#39;/workspaces/guid/workspace-services/guid/&#39;
        /// </summary>
        /// <value>Path of the resource undergoing change, i.e. &#39;/workspaces/guid/workspace-services/guid/&#39;</value>
        [DataMember(Name = "resourcePath", IsRequired = true, EmitDefaultValue = false)]
        public string ResourcePath { get; set; }

        /// <summary>
        /// Version of the resource this operation relates to
        /// </summary>
        /// <value>Version of the resource this operation relates to</value>
        [DataMember(Name = "resourceVersion", EmitDefaultValue = false)]
        public int ResourceVersion { get; set; }

        /// <summary>
        /// Name of the action being performed on the resource, i.e. install, uninstall, start
        /// </summary>
        /// <value>Name of the action being performed on the resource, i.e. install, uninstall, start</value>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets CreatedWhen
        /// </summary>
        [DataMember(Name = "createdWhen", EmitDefaultValue = false)]
        public decimal CreatedWhen { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedWhen
        /// </summary>
        [DataMember(Name = "updatedWhen", EmitDefaultValue = false)]
        public decimal UpdatedWhen { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public Object User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Operation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ResourcePath: ").Append(ResourcePath).Append("\n");
            sb.Append("  ResourceVersion: ").Append(ResourceVersion).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  CreatedWhen: ").Append(CreatedWhen).Append("\n");
            sb.Append("  UpdatedWhen: ").Append(UpdatedWhen).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Operation);
        }

        /// <summary>
        /// Returns true if Operation instances are equal
        /// </summary>
        /// <param name="input">Instance of Operation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Operation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ResourceId == input.ResourceId ||
                    (this.ResourceId != null &&
                    this.ResourceId.Equals(input.ResourceId))
                ) && 
                (
                    this.ResourcePath == input.ResourcePath ||
                    (this.ResourcePath != null &&
                    this.ResourcePath.Equals(input.ResourcePath))
                ) && 
                (
                    this.ResourceVersion == input.ResourceVersion ||
                    this.ResourceVersion.Equals(input.ResourceVersion)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.CreatedWhen == input.CreatedWhen ||
                    this.CreatedWhen.Equals(input.CreatedWhen)
                ) && 
                (
                    this.UpdatedWhen == input.UpdatedWhen ||
                    this.UpdatedWhen.Equals(input.UpdatedWhen)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceId.GetHashCode();
                }
                if (this.ResourcePath != null)
                {
                    hashCode = (hashCode * 59) + this.ResourcePath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ResourceVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedWhen.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdatedWhen.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
