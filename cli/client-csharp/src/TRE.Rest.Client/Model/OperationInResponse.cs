/*
 * Azure TRE API
 *
 * Welcome to the Azure TRE API - for more information about templates and workspaces see the [Azure TRE documentation](https://microsoft.github.io/AzureTRE)
 *
 * The version of the OpenAPI document: 0.2.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TRE.Rest.Client.Client.OpenAPIDateConverter;

namespace TRE.Rest.Client.Model
{
    /// <summary>
    /// OperationInResponse
    /// </summary>
    [DataContract(Name = "OperationInResponse")]
    public partial class OperationInResponse : IEquatable<OperationInResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationInResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OperationInResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationInResponse" /> class.
        /// </summary>
        /// <param name="operation">operation (required).</param>
        public OperationInResponse(Operation operation = default(Operation))
        {
            // to ensure "operation" is required (not null)
            if (operation == null) {
                throw new ArgumentNullException("operation is a required property for OperationInResponse and cannot be null");
            }
            this.Operation = operation;
        }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [DataMember(Name = "operation", IsRequired = true, EmitDefaultValue = false)]
        public Operation Operation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OperationInResponse {\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationInResponse);
        }

        /// <summary>
        /// Returns true if OperationInResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationInResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationInResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Operation != null)
                {
                    hashCode = (hashCode * 59) + this.Operation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
