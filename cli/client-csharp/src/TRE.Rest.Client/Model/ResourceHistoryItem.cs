/*
 * Azure TRE API
 *
 * Welcome to the Azure TRE API - for more information about templates and workspaces see the [Azure TRE documentation](https://microsoft.github.io/AzureTRE)
 *
 * The version of the OpenAPI document: 0.2.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TRE.Rest.Client.Client.OpenAPIDateConverter;

namespace TRE.Rest.Client.Model
{
    /// <summary>
    /// Resource History Item - to preserve history of resource properties
    /// </summary>
    [DataContract(Name = "ResourceHistoryItem")]
    public partial class ResourceHistoryItem : IEquatable<ResourceHistoryItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceHistoryItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResourceHistoryItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceHistoryItem" /> class.
        /// </summary>
        /// <param name="properties">properties.</param>
        /// <param name="isEnabled">isEnabled (required).</param>
        /// <param name="resourceVersion">resourceVersion (required).</param>
        /// <param name="updatedWhen">updatedWhen (required).</param>
        /// <param name="user">user.</param>
        public ResourceHistoryItem(Object properties = default(Object), bool isEnabled = default(bool), int resourceVersion = default(int), decimal updatedWhen = default(decimal), Object user = default(Object))
        {
            this.IsEnabled = isEnabled;
            this.ResourceVersion = resourceVersion;
            this.UpdatedWhen = updatedWhen;
            this.Properties = properties;
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Object Properties { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name = "isEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ResourceVersion
        /// </summary>
        [DataMember(Name = "resourceVersion", IsRequired = true, EmitDefaultValue = false)]
        public int ResourceVersion { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedWhen
        /// </summary>
        [DataMember(Name = "updatedWhen", IsRequired = true, EmitDefaultValue = false)]
        public decimal UpdatedWhen { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public Object User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResourceHistoryItem {\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  ResourceVersion: ").Append(ResourceVersion).Append("\n");
            sb.Append("  UpdatedWhen: ").Append(UpdatedWhen).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResourceHistoryItem);
        }

        /// <summary>
        /// Returns true if ResourceHistoryItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ResourceHistoryItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceHistoryItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    this.IsEnabled.Equals(input.IsEnabled)
                ) && 
                (
                    this.ResourceVersion == input.ResourceVersion ||
                    this.ResourceVersion.Equals(input.ResourceVersion)
                ) && 
                (
                    this.UpdatedWhen == input.UpdatedWhen ||
                    this.UpdatedWhen.Equals(input.UpdatedWhen)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.ResourceVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdatedWhen.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
