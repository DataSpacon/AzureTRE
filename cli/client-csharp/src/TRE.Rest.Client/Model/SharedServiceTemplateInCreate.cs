/*
 * Azure TRE API
 *
 * Welcome to the Azure TRE API - for more information about templates and workspaces see the [Azure TRE documentation](https://microsoft.github.io/AzureTRE)
 *
 * The version of the OpenAPI document: 0.2.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TRE.Rest.Client.Client.OpenAPIDateConverter;

namespace TRE.Rest.Client.Model
{
    /// <summary>
    /// SharedServiceTemplateInCreate
    /// </summary>
    [DataContract(Name = "SharedServiceTemplateInCreate")]
    public partial class SharedServiceTemplateInCreate : IEquatable<SharedServiceTemplateInCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedServiceTemplateInCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SharedServiceTemplateInCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedServiceTemplateInCreate" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="version">version (required).</param>
        /// <param name="current">current (required).</param>
        /// <param name="jsonSchema">jsonSchema (required).</param>
        /// <param name="customActions">customActions.</param>
        public SharedServiceTemplateInCreate(string name = default(string), string version = default(string), bool current = default(bool), Object jsonSchema = default(Object), Collection<CustomAction> customActions = default(Collection<CustomAction>))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for SharedServiceTemplateInCreate and cannot be null");
            }
            this.Name = name;
            // to ensure "version" is required (not null)
            if (version == null) {
                throw new ArgumentNullException("version is a required property for SharedServiceTemplateInCreate and cannot be null");
            }
            this._Version = version;
            this.Current = current;
            // to ensure "jsonSchema" is required (not null)
            if (jsonSchema == null) {
                throw new ArgumentNullException("jsonSchema is a required property for SharedServiceTemplateInCreate and cannot be null");
            }
            this.JsonSchema = jsonSchema;
            this.CustomActions = customActions;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public string _Version { get; set; }

        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [DataMember(Name = "current", IsRequired = true, EmitDefaultValue = true)]
        public bool Current { get; set; }

        /// <summary>
        /// Gets or Sets JsonSchema
        /// </summary>
        [DataMember(Name = "json_schema", IsRequired = true, EmitDefaultValue = false)]
        public Object JsonSchema { get; set; }

        /// <summary>
        /// Gets or Sets CustomActions
        /// </summary>
        [DataMember(Name = "customActions", EmitDefaultValue = false)]
        public Collection<CustomAction> CustomActions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharedServiceTemplateInCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  JsonSchema: ").Append(JsonSchema).Append("\n");
            sb.Append("  CustomActions: ").Append(CustomActions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SharedServiceTemplateInCreate);
        }

        /// <summary>
        /// Returns true if SharedServiceTemplateInCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of SharedServiceTemplateInCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SharedServiceTemplateInCreate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Current == input.Current ||
                    this.Current.Equals(input.Current)
                ) && 
                (
                    this.JsonSchema == input.JsonSchema ||
                    (this.JsonSchema != null &&
                    this.JsonSchema.Equals(input.JsonSchema))
                ) && 
                (
                    this.CustomActions == input.CustomActions ||
                    this.CustomActions != null &&
                    input.CustomActions != null &&
                    this.CustomActions.SequenceEqual(input.CustomActions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Current.GetHashCode();
                if (this.JsonSchema != null)
                {
                    hashCode = (hashCode * 59) + this.JsonSchema.GetHashCode();
                }
                if (this.CustomActions != null)
                {
                    hashCode = (hashCode * 59) + this.CustomActions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
