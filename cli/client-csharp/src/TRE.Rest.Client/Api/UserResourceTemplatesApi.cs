/*
 * Azure TRE API
 *
 * Welcome to the Azure TRE API - for more information about templates and workspaces see the [Azure TRE documentation](https://microsoft.github.io/AzureTRE)
 *
 * The version of the OpenAPI document: 0.2.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TRE.Rest.Client.Client;
using TRE.Rest.Client.Model;

namespace TRE.Rest.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserResourceTemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get User Resource Template By Name And Workspace Service
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <returns>UserResourceTemplateInResponse</returns>
        UserResourceTemplateInResponse GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGet(string serviceTemplateName, string userResourceTemplateName, bool? isUpdate = default(bool?));

        /// <summary>
        /// Get User Resource Template By Name And Workspace Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <returns>ApiResponse of UserResourceTemplateInResponse</returns>
        ApiResponse<UserResourceTemplateInResponse> GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGetWithHttpInfo(string serviceTemplateName, string userResourceTemplateName, bool? isUpdate = default(bool?));
        /// <summary>
        /// Get User Resource Templates Applicable To The Workspace Service Template
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <returns>ResourceTemplateInformationInList</returns>
        ResourceTemplateInformationInList GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGet(string serviceTemplateName);

        /// <summary>
        /// Get User Resource Templates Applicable To The Workspace Service Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <returns>ApiResponse of ResourceTemplateInformationInList</returns>
        ApiResponse<ResourceTemplateInformationInList> GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGetWithHttpInfo(string serviceTemplateName);
        /// <summary>
        /// Register User Resource Template
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateInCreate"></param>
        /// <returns>UserResourceTemplateInResponse</returns>
        UserResourceTemplateInResponse RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPost(string serviceTemplateName, UserResourceTemplateInCreate userResourceTemplateInCreate);

        /// <summary>
        /// Register User Resource Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateInCreate"></param>
        /// <returns>ApiResponse of UserResourceTemplateInResponse</returns>
        ApiResponse<UserResourceTemplateInResponse> RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPostWithHttpInfo(string serviceTemplateName, UserResourceTemplateInCreate userResourceTemplateInCreate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserResourceTemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get User Resource Template By Name And Workspace Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResourceTemplateInResponse</returns>
        System.Threading.Tasks.Task<UserResourceTemplateInResponse> GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGetAsync(string serviceTemplateName, string userResourceTemplateName, bool? isUpdate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User Resource Template By Name And Workspace Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResourceTemplateInResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResourceTemplateInResponse>> GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGetWithHttpInfoAsync(string serviceTemplateName, string userResourceTemplateName, bool? isUpdate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User Resource Templates Applicable To The Workspace Service Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceTemplateInformationInList</returns>
        System.Threading.Tasks.Task<ResourceTemplateInformationInList> GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGetAsync(string serviceTemplateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User Resource Templates Applicable To The Workspace Service Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceTemplateInformationInList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceTemplateInformationInList>> GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGetWithHttpInfoAsync(string serviceTemplateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register User Resource Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResourceTemplateInResponse</returns>
        System.Threading.Tasks.Task<UserResourceTemplateInResponse> RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPostAsync(string serviceTemplateName, UserResourceTemplateInCreate userResourceTemplateInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register User Resource Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResourceTemplateInResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResourceTemplateInResponse>> RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPostWithHttpInfoAsync(string serviceTemplateName, UserResourceTemplateInCreate userResourceTemplateInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserResourceTemplatesApi : IUserResourceTemplatesApiSync, IUserResourceTemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserResourceTemplatesApi : IUserResourceTemplatesApi
    {
        private TRE.Rest.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserResourceTemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserResourceTemplatesApi(string basePath)
        {
            this.Configuration = TRE.Rest.Client.Client.Configuration.MergeConfigurations(
                TRE.Rest.Client.Client.GlobalConfiguration.Instance,
                new TRE.Rest.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TRE.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceTemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserResourceTemplatesApi(TRE.Rest.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TRE.Rest.Client.Client.Configuration.MergeConfigurations(
                TRE.Rest.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TRE.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceTemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserResourceTemplatesApi(TRE.Rest.Client.Client.ISynchronousClient client, TRE.Rest.Client.Client.IAsynchronousClient asyncClient, TRE.Rest.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TRE.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TRE.Rest.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TRE.Rest.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TRE.Rest.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TRE.Rest.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get User Resource Template By Name And Workspace Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <returns>UserResourceTemplateInResponse</returns>
        public UserResourceTemplateInResponse GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGet(string serviceTemplateName, string userResourceTemplateName, bool? isUpdate = default(bool?))
        {
            TRE.Rest.Client.Client.ApiResponse<UserResourceTemplateInResponse> localVarResponse = GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGetWithHttpInfo(serviceTemplateName, userResourceTemplateName, isUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Resource Template By Name And Workspace Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <returns>ApiResponse of UserResourceTemplateInResponse</returns>
        public TRE.Rest.Client.Client.ApiResponse<UserResourceTemplateInResponse> GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGetWithHttpInfo(string serviceTemplateName, string userResourceTemplateName, bool? isUpdate = default(bool?))
        {
            // verify the required parameter 'serviceTemplateName' is set
            if (serviceTemplateName == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'serviceTemplateName' when calling UserResourceTemplatesApi->GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGet");
            }

            // verify the required parameter 'userResourceTemplateName' is set
            if (userResourceTemplateName == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'userResourceTemplateName' when calling UserResourceTemplatesApi->GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGet");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_template_name", TRE.Rest.Client.Client.ClientUtils.ParameterToString(serviceTemplateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_resource_template_name", TRE.Rest.Client.Client.ClientUtils.ParameterToString(userResourceTemplateName)); // path parameter
            if (isUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TRE.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "is_update", isUpdate));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserResourceTemplateInResponse>("/api/workspace-service-templates/{service_template_name}/user-resource-templates/{user_resource_template_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Resource Template By Name And Workspace Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResourceTemplateInResponse</returns>
        public async System.Threading.Tasks.Task<UserResourceTemplateInResponse> GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGetAsync(string serviceTemplateName, string userResourceTemplateName, bool? isUpdate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<UserResourceTemplateInResponse> localVarResponse = await GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGetWithHttpInfoAsync(serviceTemplateName, userResourceTemplateName, isUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Resource Template By Name And Workspace Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResourceTemplateInResponse)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<UserResourceTemplateInResponse>> GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGetWithHttpInfoAsync(string serviceTemplateName, string userResourceTemplateName, bool? isUpdate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceTemplateName' is set
            if (serviceTemplateName == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'serviceTemplateName' when calling UserResourceTemplatesApi->GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGet");
            }

            // verify the required parameter 'userResourceTemplateName' is set
            if (userResourceTemplateName == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'userResourceTemplateName' when calling UserResourceTemplatesApi->GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGet");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_template_name", TRE.Rest.Client.Client.ClientUtils.ParameterToString(serviceTemplateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_resource_template_name", TRE.Rest.Client.Client.ClientUtils.ParameterToString(userResourceTemplateName)); // path parameter
            if (isUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TRE.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "is_update", isUpdate));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserResourceTemplateInResponse>("/api/workspace-service-templates/{service_template_name}/user-resource-templates/{user_resource_template_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserResourceTemplateByNameAndWorkspaceServiceApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesUserResourceTemplateNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Resource Templates Applicable To The Workspace Service Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <returns>ResourceTemplateInformationInList</returns>
        public ResourceTemplateInformationInList GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGet(string serviceTemplateName)
        {
            TRE.Rest.Client.Client.ApiResponse<ResourceTemplateInformationInList> localVarResponse = GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGetWithHttpInfo(serviceTemplateName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Resource Templates Applicable To The Workspace Service Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <returns>ApiResponse of ResourceTemplateInformationInList</returns>
        public TRE.Rest.Client.Client.ApiResponse<ResourceTemplateInformationInList> GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGetWithHttpInfo(string serviceTemplateName)
        {
            // verify the required parameter 'serviceTemplateName' is set
            if (serviceTemplateName == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'serviceTemplateName' when calling UserResourceTemplatesApi->GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGet");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_template_name", TRE.Rest.Client.Client.ClientUtils.ParameterToString(serviceTemplateName)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceTemplateInformationInList>("/api/workspace-service-templates/{service_template_name}/user-resource-templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Resource Templates Applicable To The Workspace Service Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceTemplateInformationInList</returns>
        public async System.Threading.Tasks.Task<ResourceTemplateInformationInList> GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGetAsync(string serviceTemplateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<ResourceTemplateInformationInList> localVarResponse = await GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGetWithHttpInfoAsync(serviceTemplateName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Resource Templates Applicable To The Workspace Service Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceTemplateInformationInList)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<ResourceTemplateInformationInList>> GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGetWithHttpInfoAsync(string serviceTemplateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceTemplateName' is set
            if (serviceTemplateName == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'serviceTemplateName' when calling UserResourceTemplatesApi->GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGet");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_template_name", TRE.Rest.Client.Client.ClientUtils.ParameterToString(serviceTemplateName)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceTemplateInformationInList>("/api/workspace-service-templates/{service_template_name}/user-resource-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserResourceTemplatesApplicableToTheWorkspaceServiceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register User Resource Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateInCreate"></param>
        /// <returns>UserResourceTemplateInResponse</returns>
        public UserResourceTemplateInResponse RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPost(string serviceTemplateName, UserResourceTemplateInCreate userResourceTemplateInCreate)
        {
            TRE.Rest.Client.Client.ApiResponse<UserResourceTemplateInResponse> localVarResponse = RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPostWithHttpInfo(serviceTemplateName, userResourceTemplateInCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register User Resource Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateInCreate"></param>
        /// <returns>ApiResponse of UserResourceTemplateInResponse</returns>
        public TRE.Rest.Client.Client.ApiResponse<UserResourceTemplateInResponse> RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPostWithHttpInfo(string serviceTemplateName, UserResourceTemplateInCreate userResourceTemplateInCreate)
        {
            // verify the required parameter 'serviceTemplateName' is set
            if (serviceTemplateName == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'serviceTemplateName' when calling UserResourceTemplatesApi->RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPost");
            }

            // verify the required parameter 'userResourceTemplateInCreate' is set
            if (userResourceTemplateInCreate == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'userResourceTemplateInCreate' when calling UserResourceTemplatesApi->RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPost");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_template_name", TRE.Rest.Client.Client.ClientUtils.ParameterToString(serviceTemplateName)); // path parameter
            localVarRequestOptions.Data = userResourceTemplateInCreate;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserResourceTemplateInResponse>("/api/workspace-service-templates/{service_template_name}/user-resource-templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register User Resource Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResourceTemplateInResponse</returns>
        public async System.Threading.Tasks.Task<UserResourceTemplateInResponse> RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPostAsync(string serviceTemplateName, UserResourceTemplateInCreate userResourceTemplateInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<UserResourceTemplateInResponse> localVarResponse = await RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPostWithHttpInfoAsync(serviceTemplateName, userResourceTemplateInCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register User Resource Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="userResourceTemplateInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResourceTemplateInResponse)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<UserResourceTemplateInResponse>> RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPostWithHttpInfoAsync(string serviceTemplateName, UserResourceTemplateInCreate userResourceTemplateInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceTemplateName' is set
            if (serviceTemplateName == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'serviceTemplateName' when calling UserResourceTemplatesApi->RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPost");
            }

            // verify the required parameter 'userResourceTemplateInCreate' is set
            if (userResourceTemplateInCreate == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'userResourceTemplateInCreate' when calling UserResourceTemplatesApi->RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPost");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_template_name", TRE.Rest.Client.Client.ClientUtils.ParameterToString(serviceTemplateName)); // path parameter
            localVarRequestOptions.Data = userResourceTemplateInCreate;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserResourceTemplateInResponse>("/api/workspace-service-templates/{service_template_name}/user-resource-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterUserResourceTemplateApiWorkspaceServiceTemplatesServiceTemplateNameUserResourceTemplatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
