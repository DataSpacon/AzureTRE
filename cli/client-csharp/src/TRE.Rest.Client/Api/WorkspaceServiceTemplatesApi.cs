/*
 * Azure TRE API
 *
 * Welcome to the Azure TRE API - for more information about templates and workspaces see the [Azure TRE documentation](https://microsoft.github.io/AzureTRE)
 *
 * The version of the OpenAPI document: 0.2.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TRE.Rest.Client.Client;
using TRE.Rest.Client.Model;

namespace TRE.Rest.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkspaceServiceTemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Workspace Service Template By Name
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <returns>WorkspaceServiceTemplateInResponse</returns>
        WorkspaceServiceTemplateInResponse GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGet(string serviceTemplateName, bool? isUpdate = default(bool?));

        /// <summary>
        /// Get Workspace Service Template By Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <returns>ApiResponse of WorkspaceServiceTemplateInResponse</returns>
        ApiResponse<WorkspaceServiceTemplateInResponse> GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGetWithHttpInfo(string serviceTemplateName, bool? isUpdate = default(bool?));
        /// <summary>
        /// Get Workspace Service Templates
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResourceTemplateInformationInList</returns>
        ResourceTemplateInformationInList GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGet();

        /// <summary>
        /// Get Workspace Service Templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResourceTemplateInformationInList</returns>
        ApiResponse<ResourceTemplateInformationInList> GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGetWithHttpInfo();
        /// <summary>
        /// Register Workspace Service Template
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceServiceTemplateInCreate"></param>
        /// <returns>WorkspaceServiceTemplateInResponse</returns>
        WorkspaceServiceTemplateInResponse RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPost(WorkspaceServiceTemplateInCreate workspaceServiceTemplateInCreate);

        /// <summary>
        /// Register Workspace Service Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceServiceTemplateInCreate"></param>
        /// <returns>ApiResponse of WorkspaceServiceTemplateInResponse</returns>
        ApiResponse<WorkspaceServiceTemplateInResponse> RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPostWithHttpInfo(WorkspaceServiceTemplateInCreate workspaceServiceTemplateInCreate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkspaceServiceTemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Workspace Service Template By Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkspaceServiceTemplateInResponse</returns>
        System.Threading.Tasks.Task<WorkspaceServiceTemplateInResponse> GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGetAsync(string serviceTemplateName, bool? isUpdate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Workspace Service Template By Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkspaceServiceTemplateInResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceServiceTemplateInResponse>> GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGetWithHttpInfoAsync(string serviceTemplateName, bool? isUpdate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Workspace Service Templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceTemplateInformationInList</returns>
        System.Threading.Tasks.Task<ResourceTemplateInformationInList> GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Workspace Service Templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceTemplateInformationInList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceTemplateInformationInList>> GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register Workspace Service Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceServiceTemplateInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkspaceServiceTemplateInResponse</returns>
        System.Threading.Tasks.Task<WorkspaceServiceTemplateInResponse> RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPostAsync(WorkspaceServiceTemplateInCreate workspaceServiceTemplateInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register Workspace Service Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceServiceTemplateInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkspaceServiceTemplateInResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceServiceTemplateInResponse>> RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPostWithHttpInfoAsync(WorkspaceServiceTemplateInCreate workspaceServiceTemplateInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkspaceServiceTemplatesApi : IWorkspaceServiceTemplatesApiSync, IWorkspaceServiceTemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkspaceServiceTemplatesApi : IWorkspaceServiceTemplatesApi
    {
        private TRE.Rest.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceServiceTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkspaceServiceTemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceServiceTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkspaceServiceTemplatesApi(string basePath)
        {
            this.Configuration = TRE.Rest.Client.Client.Configuration.MergeConfigurations(
                TRE.Rest.Client.Client.GlobalConfiguration.Instance,
                new TRE.Rest.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TRE.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceServiceTemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkspaceServiceTemplatesApi(TRE.Rest.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TRE.Rest.Client.Client.Configuration.MergeConfigurations(
                TRE.Rest.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TRE.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceServiceTemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkspaceServiceTemplatesApi(TRE.Rest.Client.Client.ISynchronousClient client, TRE.Rest.Client.Client.IAsynchronousClient asyncClient, TRE.Rest.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TRE.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TRE.Rest.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TRE.Rest.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TRE.Rest.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TRE.Rest.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Workspace Service Template By Name 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <returns>WorkspaceServiceTemplateInResponse</returns>
        public WorkspaceServiceTemplateInResponse GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGet(string serviceTemplateName, bool? isUpdate = default(bool?))
        {
            TRE.Rest.Client.Client.ApiResponse<WorkspaceServiceTemplateInResponse> localVarResponse = GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGetWithHttpInfo(serviceTemplateName, isUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workspace Service Template By Name 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <returns>ApiResponse of WorkspaceServiceTemplateInResponse</returns>
        public TRE.Rest.Client.Client.ApiResponse<WorkspaceServiceTemplateInResponse> GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGetWithHttpInfo(string serviceTemplateName, bool? isUpdate = default(bool?))
        {
            // verify the required parameter 'serviceTemplateName' is set
            if (serviceTemplateName == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'serviceTemplateName' when calling WorkspaceServiceTemplatesApi->GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGet");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_template_name", TRE.Rest.Client.Client.ClientUtils.ParameterToString(serviceTemplateName)); // path parameter
            if (isUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TRE.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "is_update", isUpdate));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkspaceServiceTemplateInResponse>("/api/workspace-service-templates/{service_template_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Workspace Service Template By Name 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkspaceServiceTemplateInResponse</returns>
        public async System.Threading.Tasks.Task<WorkspaceServiceTemplateInResponse> GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGetAsync(string serviceTemplateName, bool? isUpdate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<WorkspaceServiceTemplateInResponse> localVarResponse = await GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGetWithHttpInfoAsync(serviceTemplateName, isUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workspace Service Template By Name 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTemplateName"></param>
        /// <param name="isUpdate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkspaceServiceTemplateInResponse)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<WorkspaceServiceTemplateInResponse>> GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGetWithHttpInfoAsync(string serviceTemplateName, bool? isUpdate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceTemplateName' is set
            if (serviceTemplateName == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'serviceTemplateName' when calling WorkspaceServiceTemplatesApi->GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGet");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_template_name", TRE.Rest.Client.Client.ClientUtils.ParameterToString(serviceTemplateName)); // path parameter
            if (isUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(TRE.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "is_update", isUpdate));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkspaceServiceTemplateInResponse>("/api/workspace-service-templates/{service_template_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkspaceServiceTemplateByNameApiWorkspaceServiceTemplatesServiceTemplateNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Workspace Service Templates 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResourceTemplateInformationInList</returns>
        public ResourceTemplateInformationInList GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGet()
        {
            TRE.Rest.Client.Client.ApiResponse<ResourceTemplateInformationInList> localVarResponse = GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workspace Service Templates 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResourceTemplateInformationInList</returns>
        public TRE.Rest.Client.Client.ApiResponse<ResourceTemplateInformationInList> GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGetWithHttpInfo()
        {
            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceTemplateInformationInList>("/api/workspace-service-templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Workspace Service Templates 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceTemplateInformationInList</returns>
        public async System.Threading.Tasks.Task<ResourceTemplateInformationInList> GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<ResourceTemplateInformationInList> localVarResponse = await GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workspace Service Templates 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceTemplateInformationInList)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<ResourceTemplateInformationInList>> GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceTemplateInformationInList>("/api/workspace-service-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkspaceServiceTemplatesApiWorkspaceServiceTemplatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register Workspace Service Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceServiceTemplateInCreate"></param>
        /// <returns>WorkspaceServiceTemplateInResponse</returns>
        public WorkspaceServiceTemplateInResponse RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPost(WorkspaceServiceTemplateInCreate workspaceServiceTemplateInCreate)
        {
            TRE.Rest.Client.Client.ApiResponse<WorkspaceServiceTemplateInResponse> localVarResponse = RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPostWithHttpInfo(workspaceServiceTemplateInCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register Workspace Service Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceServiceTemplateInCreate"></param>
        /// <returns>ApiResponse of WorkspaceServiceTemplateInResponse</returns>
        public TRE.Rest.Client.Client.ApiResponse<WorkspaceServiceTemplateInResponse> RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPostWithHttpInfo(WorkspaceServiceTemplateInCreate workspaceServiceTemplateInCreate)
        {
            // verify the required parameter 'workspaceServiceTemplateInCreate' is set
            if (workspaceServiceTemplateInCreate == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'workspaceServiceTemplateInCreate' when calling WorkspaceServiceTemplatesApi->RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPost");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workspaceServiceTemplateInCreate;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkspaceServiceTemplateInResponse>("/api/workspace-service-templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register Workspace Service Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceServiceTemplateInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkspaceServiceTemplateInResponse</returns>
        public async System.Threading.Tasks.Task<WorkspaceServiceTemplateInResponse> RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPostAsync(WorkspaceServiceTemplateInCreate workspaceServiceTemplateInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<WorkspaceServiceTemplateInResponse> localVarResponse = await RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPostWithHttpInfoAsync(workspaceServiceTemplateInCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register Workspace Service Template 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceServiceTemplateInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkspaceServiceTemplateInResponse)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<WorkspaceServiceTemplateInResponse>> RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPostWithHttpInfoAsync(WorkspaceServiceTemplateInCreate workspaceServiceTemplateInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workspaceServiceTemplateInCreate' is set
            if (workspaceServiceTemplateInCreate == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'workspaceServiceTemplateInCreate' when calling WorkspaceServiceTemplatesApi->RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPost");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workspaceServiceTemplateInCreate;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkspaceServiceTemplateInResponse>("/api/workspace-service-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterWorkspaceServiceTemplateApiWorkspaceServiceTemplatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
