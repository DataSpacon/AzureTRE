/*
 * Azure TRE API
 *
 * Welcome to the Azure TRE API - for more information about templates and workspaces see the [Azure TRE documentation](https://microsoft.github.io/AzureTRE)
 *
 * The version of the OpenAPI document: 0.2.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TRE.Rest.Client.Client;
using TRE.Rest.Client.Model;

namespace TRE.Rest.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISharedServicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create A Shared Service
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceInCreate"></param>
        /// <returns>OperationInResponse</returns>
        OperationInResponse CreateASharedServiceApiSharedServicesPost(SharedServiceInCreate sharedServiceInCreate);

        /// <summary>
        /// Create A Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceInCreate"></param>
        /// <returns>ApiResponse of OperationInResponse</returns>
        ApiResponse<OperationInResponse> CreateASharedServiceApiSharedServicesPostWithHttpInfo(SharedServiceInCreate sharedServiceInCreate);
        /// <summary>
        /// Delete Shared Service
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>OperationInResponse</returns>
        OperationInResponse DeleteSharedServiceApiSharedServicesSharedServiceIdDelete(string sharedServiceId);

        /// <summary>
        /// Delete Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>ApiResponse of OperationInResponse</returns>
        ApiResponse<OperationInResponse> DeleteSharedServiceApiSharedServicesSharedServiceIdDeleteWithHttpInfo(string sharedServiceId);
        /// <summary>
        /// Get A Single Resource Operation By Id
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="operationId"></param>
        /// <returns>OperationInResponse</returns>
        OperationInResponse GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGet(string sharedServiceId, string operationId);

        /// <summary>
        /// Get A Single Resource Operation By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="operationId"></param>
        /// <returns>ApiResponse of OperationInResponse</returns>
        ApiResponse<OperationInResponse> GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGetWithHttpInfo(string sharedServiceId, string operationId);
        /// <summary>
        /// Get All Operations For A Resource
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>OperationInList</returns>
        OperationInList GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGet(string sharedServiceId);

        /// <summary>
        /// Get All Operations For A Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>ApiResponse of OperationInList</returns>
        ApiResponse<OperationInList> GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGetWithHttpInfo(string sharedServiceId);
        /// <summary>
        /// Get All Shared Services
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SharedServicesInList</returns>
        SharedServicesInList GetAllSharedServicesApiSharedServicesGet();

        /// <summary>
        /// Get All Shared Services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SharedServicesInList</returns>
        ApiResponse<SharedServicesInList> GetAllSharedServicesApiSharedServicesGetWithHttpInfo();
        /// <summary>
        /// Get Shared Service By Id
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>SharedServiceInResponse</returns>
        SharedServiceInResponse GetSharedServiceByIdApiSharedServicesSharedServiceIdGet(string sharedServiceId);

        /// <summary>
        /// Get Shared Service By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>ApiResponse of SharedServiceInResponse</returns>
        ApiResponse<SharedServiceInResponse> GetSharedServiceByIdApiSharedServicesSharedServiceIdGetWithHttpInfo(string sharedServiceId);
        /// <summary>
        /// Invoke Action On A Shared Service
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="action"></param>
        /// <returns>OperationInResponse</returns>
        OperationInResponse InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPost(string sharedServiceId, string action);

        /// <summary>
        /// Invoke Action On A Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="action"></param>
        /// <returns>ApiResponse of OperationInResponse</returns>
        ApiResponse<OperationInResponse> InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPostWithHttpInfo(string sharedServiceId, string action);
        /// <summary>
        /// Update An Existing Shared Service
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="resourcePatch"></param>
        /// <param name="etag"> (optional)</param>
        /// <returns>SharedServiceInResponse</returns>
        SharedServiceInResponse UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatch(string sharedServiceId, ResourcePatch resourcePatch, string etag = default(string));

        /// <summary>
        /// Update An Existing Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="resourcePatch"></param>
        /// <param name="etag"> (optional)</param>
        /// <returns>ApiResponse of SharedServiceInResponse</returns>
        ApiResponse<SharedServiceInResponse> UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatchWithHttpInfo(string sharedServiceId, ResourcePatch resourcePatch, string etag = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISharedServicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create A Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationInResponse</returns>
        System.Threading.Tasks.Task<OperationInResponse> CreateASharedServiceApiSharedServicesPostAsync(SharedServiceInCreate sharedServiceInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create A Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationInResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationInResponse>> CreateASharedServiceApiSharedServicesPostWithHttpInfoAsync(SharedServiceInCreate sharedServiceInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationInResponse</returns>
        System.Threading.Tasks.Task<OperationInResponse> DeleteSharedServiceApiSharedServicesSharedServiceIdDeleteAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationInResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationInResponse>> DeleteSharedServiceApiSharedServicesSharedServiceIdDeleteWithHttpInfoAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get A Single Resource Operation By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="operationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationInResponse</returns>
        System.Threading.Tasks.Task<OperationInResponse> GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGetAsync(string sharedServiceId, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get A Single Resource Operation By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="operationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationInResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationInResponse>> GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGetWithHttpInfoAsync(string sharedServiceId, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Operations For A Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationInList</returns>
        System.Threading.Tasks.Task<OperationInList> GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGetAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Operations For A Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationInList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationInList>> GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGetWithHttpInfoAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Shared Services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedServicesInList</returns>
        System.Threading.Tasks.Task<SharedServicesInList> GetAllSharedServicesApiSharedServicesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Shared Services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedServicesInList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharedServicesInList>> GetAllSharedServicesApiSharedServicesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Shared Service By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedServiceInResponse</returns>
        System.Threading.Tasks.Task<SharedServiceInResponse> GetSharedServiceByIdApiSharedServicesSharedServiceIdGetAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Shared Service By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedServiceInResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharedServiceInResponse>> GetSharedServiceByIdApiSharedServicesSharedServiceIdGetWithHttpInfoAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invoke Action On A Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationInResponse</returns>
        System.Threading.Tasks.Task<OperationInResponse> InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPostAsync(string sharedServiceId, string action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invoke Action On A Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationInResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationInResponse>> InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPostWithHttpInfoAsync(string sharedServiceId, string action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update An Existing Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="resourcePatch"></param>
        /// <param name="etag"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedServiceInResponse</returns>
        System.Threading.Tasks.Task<SharedServiceInResponse> UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatchAsync(string sharedServiceId, ResourcePatch resourcePatch, string etag = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update An Existing Shared Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="resourcePatch"></param>
        /// <param name="etag"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedServiceInResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharedServiceInResponse>> UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatchWithHttpInfoAsync(string sharedServiceId, ResourcePatch resourcePatch, string etag = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISharedServicesApi : ISharedServicesApiSync, ISharedServicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SharedServicesApi : ISharedServicesApi
    {
        private TRE.Rest.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SharedServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SharedServicesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SharedServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SharedServicesApi(string basePath)
        {
            this.Configuration = TRE.Rest.Client.Client.Configuration.MergeConfigurations(
                TRE.Rest.Client.Client.GlobalConfiguration.Instance,
                new TRE.Rest.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TRE.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SharedServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SharedServicesApi(TRE.Rest.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TRE.Rest.Client.Client.Configuration.MergeConfigurations(
                TRE.Rest.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TRE.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TRE.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SharedServicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SharedServicesApi(TRE.Rest.Client.Client.ISynchronousClient client, TRE.Rest.Client.Client.IAsynchronousClient asyncClient, TRE.Rest.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TRE.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TRE.Rest.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TRE.Rest.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TRE.Rest.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TRE.Rest.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create A Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceInCreate"></param>
        /// <returns>OperationInResponse</returns>
        public OperationInResponse CreateASharedServiceApiSharedServicesPost(SharedServiceInCreate sharedServiceInCreate)
        {
            TRE.Rest.Client.Client.ApiResponse<OperationInResponse> localVarResponse = CreateASharedServiceApiSharedServicesPostWithHttpInfo(sharedServiceInCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create A Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceInCreate"></param>
        /// <returns>ApiResponse of OperationInResponse</returns>
        public TRE.Rest.Client.Client.ApiResponse<OperationInResponse> CreateASharedServiceApiSharedServicesPostWithHttpInfo(SharedServiceInCreate sharedServiceInCreate)
        {
            // verify the required parameter 'sharedServiceInCreate' is set
            if (sharedServiceInCreate == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceInCreate' when calling SharedServicesApi->CreateASharedServiceApiSharedServicesPost");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sharedServiceInCreate;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationInResponse>("/api/shared-services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateASharedServiceApiSharedServicesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create A Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationInResponse</returns>
        public async System.Threading.Tasks.Task<OperationInResponse> CreateASharedServiceApiSharedServicesPostAsync(SharedServiceInCreate sharedServiceInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<OperationInResponse> localVarResponse = await CreateASharedServiceApiSharedServicesPostWithHttpInfoAsync(sharedServiceInCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create A Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceInCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationInResponse)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<OperationInResponse>> CreateASharedServiceApiSharedServicesPostWithHttpInfoAsync(SharedServiceInCreate sharedServiceInCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sharedServiceInCreate' is set
            if (sharedServiceInCreate == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceInCreate' when calling SharedServicesApi->CreateASharedServiceApiSharedServicesPost");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sharedServiceInCreate;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationInResponse>("/api/shared-services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateASharedServiceApiSharedServicesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>OperationInResponse</returns>
        public OperationInResponse DeleteSharedServiceApiSharedServicesSharedServiceIdDelete(string sharedServiceId)
        {
            TRE.Rest.Client.Client.ApiResponse<OperationInResponse> localVarResponse = DeleteSharedServiceApiSharedServicesSharedServiceIdDeleteWithHttpInfo(sharedServiceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>ApiResponse of OperationInResponse</returns>
        public TRE.Rest.Client.Client.ApiResponse<OperationInResponse> DeleteSharedServiceApiSharedServicesSharedServiceIdDeleteWithHttpInfo(string sharedServiceId)
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->DeleteSharedServiceApiSharedServicesSharedServiceIdDelete");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<OperationInResponse>("/api/shared-services/{shared_service_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSharedServiceApiSharedServicesSharedServiceIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationInResponse</returns>
        public async System.Threading.Tasks.Task<OperationInResponse> DeleteSharedServiceApiSharedServicesSharedServiceIdDeleteAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<OperationInResponse> localVarResponse = await DeleteSharedServiceApiSharedServicesSharedServiceIdDeleteWithHttpInfoAsync(sharedServiceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationInResponse)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<OperationInResponse>> DeleteSharedServiceApiSharedServicesSharedServiceIdDeleteWithHttpInfoAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->DeleteSharedServiceApiSharedServicesSharedServiceIdDelete");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<OperationInResponse>("/api/shared-services/{shared_service_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSharedServiceApiSharedServicesSharedServiceIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get A Single Resource Operation By Id 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="operationId"></param>
        /// <returns>OperationInResponse</returns>
        public OperationInResponse GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGet(string sharedServiceId, string operationId)
        {
            TRE.Rest.Client.Client.ApiResponse<OperationInResponse> localVarResponse = GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGetWithHttpInfo(sharedServiceId, operationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get A Single Resource Operation By Id 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="operationId"></param>
        /// <returns>ApiResponse of OperationInResponse</returns>
        public TRE.Rest.Client.Client.ApiResponse<OperationInResponse> GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGetWithHttpInfo(string sharedServiceId, string operationId)
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGet");
            }

            // verify the required parameter 'operationId' is set
            if (operationId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'operationId' when calling SharedServicesApi->GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGet");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("operation_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(operationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OperationInResponse>("/api/shared-services/{shared_service_id}/operations/{operation_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get A Single Resource Operation By Id 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="operationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationInResponse</returns>
        public async System.Threading.Tasks.Task<OperationInResponse> GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGetAsync(string sharedServiceId, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<OperationInResponse> localVarResponse = await GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGetWithHttpInfoAsync(sharedServiceId, operationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get A Single Resource Operation By Id 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="operationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationInResponse)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<OperationInResponse>> GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGetWithHttpInfoAsync(string sharedServiceId, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGet");
            }

            // verify the required parameter 'operationId' is set
            if (operationId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'operationId' when calling SharedServicesApi->GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGet");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("operation_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(operationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OperationInResponse>("/api/shared-services/{shared_service_id}/operations/{operation_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetASingleResourceOperationByIdApiSharedServicesSharedServiceIdOperationsOperationIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Operations For A Resource 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>OperationInList</returns>
        public OperationInList GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGet(string sharedServiceId)
        {
            TRE.Rest.Client.Client.ApiResponse<OperationInList> localVarResponse = GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGetWithHttpInfo(sharedServiceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Operations For A Resource 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>ApiResponse of OperationInList</returns>
        public TRE.Rest.Client.Client.ApiResponse<OperationInList> GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGetWithHttpInfo(string sharedServiceId)
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGet");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OperationInList>("/api/shared-services/{shared_service_id}/operations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Operations For A Resource 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationInList</returns>
        public async System.Threading.Tasks.Task<OperationInList> GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGetAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<OperationInList> localVarResponse = await GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGetWithHttpInfoAsync(sharedServiceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Operations For A Resource 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationInList)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<OperationInList>> GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGetWithHttpInfoAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGet");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OperationInList>("/api/shared-services/{shared_service_id}/operations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllOperationsForAResourceApiSharedServicesSharedServiceIdOperationsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Shared Services 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SharedServicesInList</returns>
        public SharedServicesInList GetAllSharedServicesApiSharedServicesGet()
        {
            TRE.Rest.Client.Client.ApiResponse<SharedServicesInList> localVarResponse = GetAllSharedServicesApiSharedServicesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Shared Services 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SharedServicesInList</returns>
        public TRE.Rest.Client.Client.ApiResponse<SharedServicesInList> GetAllSharedServicesApiSharedServicesGetWithHttpInfo()
        {
            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SharedServicesInList>("/api/shared-services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSharedServicesApiSharedServicesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Shared Services 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedServicesInList</returns>
        public async System.Threading.Tasks.Task<SharedServicesInList> GetAllSharedServicesApiSharedServicesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<SharedServicesInList> localVarResponse = await GetAllSharedServicesApiSharedServicesGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Shared Services 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedServicesInList)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<SharedServicesInList>> GetAllSharedServicesApiSharedServicesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SharedServicesInList>("/api/shared-services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSharedServicesApiSharedServicesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shared Service By Id 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>SharedServiceInResponse</returns>
        public SharedServiceInResponse GetSharedServiceByIdApiSharedServicesSharedServiceIdGet(string sharedServiceId)
        {
            TRE.Rest.Client.Client.ApiResponse<SharedServiceInResponse> localVarResponse = GetSharedServiceByIdApiSharedServicesSharedServiceIdGetWithHttpInfo(sharedServiceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shared Service By Id 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <returns>ApiResponse of SharedServiceInResponse</returns>
        public TRE.Rest.Client.Client.ApiResponse<SharedServiceInResponse> GetSharedServiceByIdApiSharedServicesSharedServiceIdGetWithHttpInfo(string sharedServiceId)
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->GetSharedServiceByIdApiSharedServicesSharedServiceIdGet");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SharedServiceInResponse>("/api/shared-services/{shared_service_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSharedServiceByIdApiSharedServicesSharedServiceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shared Service By Id 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedServiceInResponse</returns>
        public async System.Threading.Tasks.Task<SharedServiceInResponse> GetSharedServiceByIdApiSharedServicesSharedServiceIdGetAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<SharedServiceInResponse> localVarResponse = await GetSharedServiceByIdApiSharedServicesSharedServiceIdGetWithHttpInfoAsync(sharedServiceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shared Service By Id 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedServiceInResponse)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<SharedServiceInResponse>> GetSharedServiceByIdApiSharedServicesSharedServiceIdGetWithHttpInfoAsync(string sharedServiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->GetSharedServiceByIdApiSharedServicesSharedServiceIdGet");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SharedServiceInResponse>("/api/shared-services/{shared_service_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSharedServiceByIdApiSharedServicesSharedServiceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke Action On A Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="action"></param>
        /// <returns>OperationInResponse</returns>
        public OperationInResponse InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPost(string sharedServiceId, string action)
        {
            TRE.Rest.Client.Client.ApiResponse<OperationInResponse> localVarResponse = InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPostWithHttpInfo(sharedServiceId, action);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke Action On A Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="action"></param>
        /// <returns>ApiResponse of OperationInResponse</returns>
        public TRE.Rest.Client.Client.ApiResponse<OperationInResponse> InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPostWithHttpInfo(string sharedServiceId, string action)
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPost");
            }

            // verify the required parameter 'action' is set
            if (action == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'action' when calling SharedServicesApi->InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPost");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TRE.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "action", action));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationInResponse>("/api/shared-services/{shared_service_id}/invoke-action", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke Action On A Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationInResponse</returns>
        public async System.Threading.Tasks.Task<OperationInResponse> InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPostAsync(string sharedServiceId, string action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<OperationInResponse> localVarResponse = await InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPostWithHttpInfoAsync(sharedServiceId, action, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke Action On A Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="action"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationInResponse)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<OperationInResponse>> InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPostWithHttpInfoAsync(string sharedServiceId, string action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPost");
            }

            // verify the required parameter 'action' is set
            if (action == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'action' when calling SharedServicesApi->InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPost");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TRE.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "action", action));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationInResponse>("/api/shared-services/{shared_service_id}/invoke-action", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvokeActionOnASharedServiceApiSharedServicesSharedServiceIdInvokeActionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update An Existing Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="resourcePatch"></param>
        /// <param name="etag"> (optional)</param>
        /// <returns>SharedServiceInResponse</returns>
        public SharedServiceInResponse UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatch(string sharedServiceId, ResourcePatch resourcePatch, string etag = default(string))
        {
            TRE.Rest.Client.Client.ApiResponse<SharedServiceInResponse> localVarResponse = UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatchWithHttpInfo(sharedServiceId, resourcePatch, etag);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update An Existing Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="resourcePatch"></param>
        /// <param name="etag"> (optional)</param>
        /// <returns>ApiResponse of SharedServiceInResponse</returns>
        public TRE.Rest.Client.Client.ApiResponse<SharedServiceInResponse> UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatchWithHttpInfo(string sharedServiceId, ResourcePatch resourcePatch, string etag = default(string))
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatch");
            }

            // verify the required parameter 'resourcePatch' is set
            if (resourcePatch == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'resourcePatch' when calling SharedServicesApi->UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatch");
            }

            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter
            if (etag != null)
            {
                localVarRequestOptions.HeaderParameters.Add("etag", TRE.Rest.Client.Client.ClientUtils.ParameterToString(etag)); // header parameter
            }
            localVarRequestOptions.Data = resourcePatch;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SharedServiceInResponse>("/api/shared-services/{shared_service_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update An Existing Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="resourcePatch"></param>
        /// <param name="etag"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedServiceInResponse</returns>
        public async System.Threading.Tasks.Task<SharedServiceInResponse> UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatchAsync(string sharedServiceId, ResourcePatch resourcePatch, string etag = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TRE.Rest.Client.Client.ApiResponse<SharedServiceInResponse> localVarResponse = await UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatchWithHttpInfoAsync(sharedServiceId, resourcePatch, etag, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update An Existing Shared Service 
        /// </summary>
        /// <exception cref="TRE.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedServiceId"></param>
        /// <param name="resourcePatch"></param>
        /// <param name="etag"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedServiceInResponse)</returns>
        public async System.Threading.Tasks.Task<TRE.Rest.Client.Client.ApiResponse<SharedServiceInResponse>> UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatchWithHttpInfoAsync(string sharedServiceId, ResourcePatch resourcePatch, string etag = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sharedServiceId' is set
            if (sharedServiceId == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'sharedServiceId' when calling SharedServicesApi->UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatch");
            }

            // verify the required parameter 'resourcePatch' is set
            if (resourcePatch == null)
            {
                throw new TRE.Rest.Client.Client.ApiException(400, "Missing required parameter 'resourcePatch' when calling SharedServicesApi->UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatch");
            }


            TRE.Rest.Client.Client.RequestOptions localVarRequestOptions = new TRE.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TRE.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TRE.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shared_service_id", TRE.Rest.Client.Client.ClientUtils.ParameterToString(sharedServiceId)); // path parameter
            if (etag != null)
            {
                localVarRequestOptions.HeaderParameters.Add("etag", TRE.Rest.Client.Client.ClientUtils.ParameterToString(etag)); // header parameter
            }
            localVarRequestOptions.Data = resourcePatch;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SharedServiceInResponse>("/api/shared-services/{shared_service_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAnExistingSharedServiceApiSharedServicesSharedServiceIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
