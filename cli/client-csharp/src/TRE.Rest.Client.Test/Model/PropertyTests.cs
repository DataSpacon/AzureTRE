/*
 * Azure TRE API
 *
 * Welcome to the Azure TRE API - for more information about templates and workspaces see the [Azure TRE documentation](https://microsoft.github.io/AzureTRE)
 *
 * The version of the OpenAPI document: 0.2.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using TRE.Rest.Client.Api;
using TRE.Rest.Client.Model;
using TRE.Rest.Client.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace TRE.Rest.Client.Test.Model
{
    /// <summary>
    ///  Class for testing Property
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class PropertyTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Property
        //private Property instance;

        public PropertyTests()
        {
            // TODO uncomment below to create an instance of Property
            //instance = new Property();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Property
        /// </summary>
        [Fact]
        public void PropertyInstanceTest()
        {
            // TODO uncomment below to test "IsType" Property
            //Assert.IsType<Property>(instance);
        }


        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }
        /// <summary>
        /// Test the property 'Title'
        /// </summary>
        [Fact]
        public void TitleTest()
        {
            // TODO unit test for the property 'Title'
        }
        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            // TODO unit test for the property 'Description'
        }
        /// <summary>
        /// Test the property 'Default'
        /// </summary>
        [Fact]
        public void DefaultTest()
        {
            // TODO unit test for the property 'Default'
        }
        /// <summary>
        /// Test the property 'Enum'
        /// </summary>
        [Fact]
        public void EnumTest()
        {
            // TODO unit test for the property 'Enum'
        }
        /// <summary>
        /// Test the property 'Const'
        /// </summary>
        [Fact]
        public void ConstTest()
        {
            // TODO unit test for the property 'Const'
        }
        /// <summary>
        /// Test the property 'MultipleOf'
        /// </summary>
        [Fact]
        public void MultipleOfTest()
        {
            // TODO unit test for the property 'MultipleOf'
        }
        /// <summary>
        /// Test the property 'Maximum'
        /// </summary>
        [Fact]
        public void MaximumTest()
        {
            // TODO unit test for the property 'Maximum'
        }
        /// <summary>
        /// Test the property 'ExclusiveMaximum'
        /// </summary>
        [Fact]
        public void ExclusiveMaximumTest()
        {
            // TODO unit test for the property 'ExclusiveMaximum'
        }
        /// <summary>
        /// Test the property 'Minimum'
        /// </summary>
        [Fact]
        public void MinimumTest()
        {
            // TODO unit test for the property 'Minimum'
        }
        /// <summary>
        /// Test the property 'ExclusiveMinimum'
        /// </summary>
        [Fact]
        public void ExclusiveMinimumTest()
        {
            // TODO unit test for the property 'ExclusiveMinimum'
        }
        /// <summary>
        /// Test the property 'MaxLength'
        /// </summary>
        [Fact]
        public void MaxLengthTest()
        {
            // TODO unit test for the property 'MaxLength'
        }
        /// <summary>
        /// Test the property 'MinLength'
        /// </summary>
        [Fact]
        public void MinLengthTest()
        {
            // TODO unit test for the property 'MinLength'
        }
        /// <summary>
        /// Test the property 'Pattern'
        /// </summary>
        [Fact]
        public void PatternTest()
        {
            // TODO unit test for the property 'Pattern'
        }
        /// <summary>
        /// Test the property 'Updateable'
        /// </summary>
        [Fact]
        public void UpdateableTest()
        {
            // TODO unit test for the property 'Updateable'
        }
        /// <summary>
        /// Test the property 'ReadOnly'
        /// </summary>
        [Fact]
        public void ReadOnlyTest()
        {
            // TODO unit test for the property 'ReadOnly'
        }

    }

}
